buildscript {
	ext {
		springBootVersion = '1.3.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot' 

jar {
	baseName = 'springboot-orm-learn'
	version = '0.0.1-SNAPSHOT'
}

ext {
	javaVersion = 1.7
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
	mavenCentral()
}


dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-devtools"
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	
	/**
	 * http://www.querydsl.com/
	 * 쿼리와 닮은 Java 메서드를 이용해서 사용하는 프레임워크.
	 * xml 등으로 쿼리를 작성할 필요가 없음
     */
    compile "com.mysema.querydsl:querydsl-jpa:3.7.0"
    compile ("com.mysema.querydsl:querydsl-apt:3.7.0") {
    	exclude group: "com.google.guava"
    }
    
    /**
     * HikariCP
     * https://github.com/brettwooldridge/HikariCP
     */
    compile "com.zaxxer:HikariCP"
	compile "com.h2database:h2"
	compile "org.projectlombok:lombok:1.16.6"
	
	testCompile "com.jayway.jsonpath:json-path"
	testCompile "org.springframework.boot:spring-boot-starter-test" 
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.11'
}

configurations {
	compile.exclude module: "spring-boot-starter-jdbc"
    querydslapt
}

//exclude common-logging
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    querydsl {
        java {
            srcDirs = ['src/main/querydsl']
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
        '-proc:only', '-processor', 'com.mysema.query.apt.jpa.JPAAnnotationProcessor'
    ]
    destinationDir = sourceSets.querydsl.java.srcDirs.iterator().next()
    dependencyCacheDir = compileJava.dependencyCacheDir
}
generateQueryDSL.mustRunAfter clean


compileJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
	dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileQuerydslJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

compileTestJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

clean {
    delete sourceSets.querydsl.java.srcDirs
}